list:
    just --list

export NIGHTLY := "nightly-2024-08-21"

install-nightly:
    #!/usr/bin/env bash
    if [ -z "$(rustup toolchain list | grep $NIGHTLY)" ]; then
        echo "Installing nightly"
        rustup toolchain install $NIGHTLY && rustup component add rust-src --toolchain $NIGHTLY
    fi

export ANDROID_HOME := env_var_or_default("ANDROID_HOME", "~/Library/Android/sdk")

install-ndk:
    #!/usr/bin/env bash
    SDK_MANAGER=${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager
    NDK="ndk;26.1.10909125"

    echo "Installing ndk"
    $SDK_MANAGER --install $NDK


install-ios-targets: install-nightly
    rustup target add aarch64-apple-ios-sim aarch64-apple-ios

install-android-targets:
    rustup toolchain install stable
    rustup target add x86_64-linux-android
    rustup target add aarch64-linux-android
    rustup target add armv7-linux-androideabi
    cargo install cargo-ndk

test-ios:
    @set -o pipefail && xcodebuild -project tests/ios/GemTest/GemTest.xcodeproj \
    -scheme GemTest \
    -sdk iphonesimulator \
    -destination "platform=iOS Simulator,name=iPhone 15" \
    test | xcbeautify

export LIB_NAME := "gemstone"
export FW_NAME := "Gemstone"
export STATIC_LIB_NAME := "lib" + LIB_NAME + ".a"
export DY_LIB_NAME := if os() == "macos" { "libgemstone.dylib" } else { "libgemstone.so" }

export BUILD_MODE_TARGET := if env_var_or_default("BUILD_MODE", "") == "" { "debug" } else { env_var("BUILD_MODE") }
export BUILD_MODE := env_var_or_default("BUILD_MODE", "")

export TARGET_DIR := "../target"
export GEN_SWIFT_FOLDER := "generated/swift"
export GEN_KOTLIN_FOLDER := "generated/kotlin"

export TARGET_XC_FW_FOLDER := "target/spm"
export FW_FFI_NAME := FW_NAME + "FFI"
export FW_FFI_FILE := FW_FFI_NAME + ".framework"
export XC_FW_FFI_NAME := FW_FFI_NAME + ".xcframework"
export DEPLOYMENT_TARGET := env_var_or_default("IPHONEOS_DEPLOYMENT_TARGET", "16.0")

build-ios: build-targets bindgen-swift assemble-frameworks xcframework cp-xcframework-source

build-targets:
    #!/usr/bin/env bash
    echo "iOS deployment target ${DEPLOYMENT_TARGET}, BUILD_MODE_TARGET: ${BUILD_MODE_TARGET}"
    IPHONEOS_DEPLOYMENT_TARGET=${DEPLOYMENT_TARGET} cargo build --timings --target aarch64-apple-ios-sim --target aarch64-apple-ios --${BUILD_MODE}
    IPHONEOS_DEPLOYMENT_TARGET=${DEPLOYMENT_TARGET} cargo +${NIGHTLY} build --timings -Z build-std --lib --target aarch64-apple-ios-macabi --${BUILD_MODE}

bindgen-swift:
    #!/usr/bin/env bash
    echo "Bindgen swift $STATIC_LIB_NAME"
    mkdir -p ${GEN_SWIFT_FOLDER}
    cargo build --${BUILD_MODE}
    cargo run -p uniffi-bindgen generate --library --language swift --crate ${LIB_NAME} ${TARGET_DIR}/${BUILD_MODE_TARGET}/${DY_LIB_NAME} -o ${GEN_SWIFT_FOLDER}

assemble-frameworks:
    #!/usr/bin/env bash
    MODULE_MAP=$(
    cat << EOF
    // This file was autogenerated by some hot garbage in the uniffi crate.
    framework module ${FW_FFI_NAME} {
        header "${FW_FFI_NAME}.h"
        export *
    }
    EOF
    )
    cd ${TARGET_DIR} && find . -type d -name ${FW_FFI_FILE} | xargs rm -rf
    for target in aarch64-apple-ios-sim aarch64-apple-ios aarch64-apple-ios-macabi; do \
        pushd ${TARGET_DIR}/${target}/${BUILD_MODE_TARGET} > /dev/null && \
        mkdir -p ${FW_FFI_FILE} && cd ${FW_FFI_FILE} && mkdir Headers Modules && echo "$MODULE_MAP" > ./Modules/module.modulemap && cp ../../../../${LIB_NAME}/${GEN_SWIFT_FOLDER}/${FW_FFI_NAME}.h ./Headers && cp ../${STATIC_LIB_NAME} ./${FW_FFI_NAME} && cp ../../../../${LIB_NAME}/src/Info.plist ./; \
        popd > /dev/null; \
    done

xcframework:
    #!/usr/bin/env bash
    rm -rf ${TARGET_XC_FW_FOLDER}/Sources/${XC_FW_FFI_NAME} && mkdir -p ${TARGET_XC_FW_FOLDER}/Sources
    xcodebuild -create-xcframework -framework ${TARGET_DIR}/aarch64-apple-ios/${BUILD_MODE_TARGET}/${FW_FFI_FILE} -framework ${TARGET_DIR}/aarch64-apple-ios-sim/${BUILD_MODE_TARGET}/${FW_FFI_FILE} -framework ${TARGET_DIR}/aarch64-apple-ios-macabi/${BUILD_MODE_TARGET}/${FW_FFI_FILE} -output ${TARGET_XC_FW_FOLDER}/Sources/${XC_FW_FFI_NAME}

cp-xcframework-source:
    #!/usr/bin/env bash
    mkdir -p ${TARGET_XC_FW_FOLDER}/Sources/${FW_NAME}
    cp src/Package.swift ${TARGET_XC_FW_FOLDER}
    cp ${GEN_SWIFT_FOLDER}/${FW_NAME}.swift ${TARGET_XC_FW_FOLDER}/Sources/${FW_NAME}

bindgen-kotlin:
    #!/usr/bin/env bash
    echo "Bindgen kotlin BUILD_MODE_TARGET: ${BUILD_MODE_TARGET}"
    mkdir -p ${GEN_KOTLIN_FOLDER}
    cargo build --${BUILD_MODE}
    cargo run -p uniffi-bindgen generate --library --language kotlin --crate ${LIB_NAME} ${TARGET_DIR}/${BUILD_MODE_TARGET}/${DY_LIB_NAME} -o ${GEN_KOTLIN_FOLDER}

build-android:
    #!/usr/bin/env bash
    # sdkman and jdk17
    cp -Rf ${GEN_KOTLIN_FOLDER}/uniffi android/gemstone/src/main/java
    cd android && touch local.properties && ./gradlew publishToMavenLocal
