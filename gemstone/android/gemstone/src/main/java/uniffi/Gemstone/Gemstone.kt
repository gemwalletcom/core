// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.Gemstone

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0

    @JvmField var len: Long = 0

    @JvmField var data: Pointer? = null

    class ByValue :
        RustBuffer(),
        Structure.ByValue

    class ByReference :
        RustBuffer(),
        Structure.ByReference

    internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) =
            uniffiRustCall { status ->
                // Note: need to convert the size to a `Long` value to make this work with JVM.
                UniffiLib.INSTANCE.ffi_gemstone_rustbuffer_alloc(size.toLong(), status)
            }.also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }

        internal fun create(
            capacity: ULong,
            len: ULong,
            data: Pointer?,
        ): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) =
            uniffiRustCall { status ->
                UniffiLib.INSTANCE.ffi_gemstone_rustbuffer_free(buf, status)
            }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue :
        ForeignBytes(),
        Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(
        value: KotlinType,
        buf: ByteBuffer,
    )

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf =
                rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                    it.order(ByteOrder.BIG_ENDIAN)
                }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)

    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue :
        UniffiRustCallStatus(),
        Structure.ByValue

    fun isSuccess(): Boolean = code == UNIFFI_CALL_SUCCESS

    fun isError(): Boolean = code == UNIFFI_CALL_ERROR

    fun isPanic(): Boolean = code == UNIFFI_CALL_UNEXPECTED_ERROR

    companion object {
        fun create(
            code: Byte,
            errorBuf: RustBuffer.ByValue,
        ): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(
    message: String,
) : kotlin.Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : kotlin.Exception> uniffiRustCallWithError(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    callback: (UniffiRustCallStatus) -> U,
): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun <E : kotlin.Exception> uniffiCheckCallStatus(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    status: UniffiRustCallStatus,
) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler : UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U =
    uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)

internal inline fun <T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun <T, reified E : Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter =
        java.util.concurrent.atomic
            .AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T = map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T = map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "gemstone"
}

private inline fun <reified Lib : Library> loadIndirect(componentName: String): Lib =
    Native.load<Lib>(findLibraryName(componentName), Lib::class.java)

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(
        `data`: Long,
        `pollResult`: Byte,
    )
}

internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ) : UniffiForeignFuture(`handle`, `free`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU8(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI8(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU16(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI16(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructPointer(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructPointer.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructRustBuffer(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,
    )
}

@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructVoid(`callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructVoid.UniffiByValue,
    )
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "Gemstone")
                .also { lib: UniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
        }

        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_gemstone_fn_clone_config(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_gemstone_fn_free_config(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_gemstone_fn_constructor_config_new(uniffi_out_err: UniffiRustCallStatus): Pointer

    fun uniffi_gemstone_fn_method_config_get_bitcoin_chain_config(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_block_explorers(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_chain_config(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_docs_url(
        `ptr`: Pointer,
        `item`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_evm_chain_config(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_nodes(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_nodes_for_chain(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_public_url(
        `ptr`: Pointer,
        `item`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_social_url(
        `ptr`: Pointer,
        `item`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_solana_token_program(
        `ptr`: Pointer,
        `id`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_solana_token_program_id(
        `ptr`: Pointer,
        `address`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_stake_config(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_validators(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_get_wallet_connect_config(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_image_formatter_asset_url(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        `tokenId`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_config_image_formatter_validator_url(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        `id`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_clone_explorer(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_gemstone_fn_free_explorer(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_gemstone_fn_constructor_explorer_new(
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_gemstone_fn_method_explorer_get_address_url(
        `ptr`: Pointer,
        `explorerName`: RustBuffer.ByValue,
        `address`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_explorer_get_token_url(
        `ptr`: Pointer,
        `explorerName`: RustBuffer.ByValue,
        `address`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_explorer_get_transaction_url(
        `ptr`: Pointer,
        `explorerName`: RustBuffer.ByValue,
        `transactionId`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_clone_walletconnectnamespace(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_gemstone_fn_free_walletconnectnamespace(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_gemstone_fn_constructor_walletconnectnamespace_new(uniffi_out_err: UniffiRustCallStatus): Pointer

    fun uniffi_gemstone_fn_method_walletconnectnamespace_get_namespace(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_method_walletconnectnamespace_get_reference(
        `ptr`: Pointer,
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_asset_default_rank(
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun uniffi_gemstone_fn_func_asset_wrapper(
        `chain`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_decode_delegations_return(
        `result`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_decode_undelegations_return(
        `result`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_decode_validators_return(
        `result`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_claim_call(
        `operatorAddress`: RustBuffer.ByValue,
        `requestNumber`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_delegate_call(
        `operatorAddress`: RustBuffer.ByValue,
        `delegateVotePower`: Byte,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_delegations_call(
        `delegator`: RustBuffer.ByValue,
        `offset`: Short,
        `limit`: Short,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_redelegate_call(
        `srcValidator`: RustBuffer.ByValue,
        `dstValidator`: RustBuffer.ByValue,
        `shares`: RustBuffer.ByValue,
        `delegateVotePower`: Byte,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_undelegate_call(
        `operatorAddress`: RustBuffer.ByValue,
        `shares`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_undelegations_call(
        `delegator`: RustBuffer.ByValue,
        `offset`: Short,
        `limit`: Short,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_bsc_encode_validators_call(
        `offset`: Short,
        `limit`: Short,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_cosmos_convert_hrp(
        `address`: RustBuffer.ByValue,
        `hrp`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lib_version(uniffi_out_err: UniffiRustCallStatus): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_decode_get_withdrawal_statuses(
        `result`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_decode_request_withdrawals_return(
        `result`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_decode_withdrawal_request_ids(
        `result`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_encode_claim_withdrawal(
        `requestId`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_encode_request_withdrawals(
        `amounts`: RustBuffer.ByValue,
        `owner`: RustBuffer.ByValue,
        `permit`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_encode_submit(
        `referral`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_encode_withdrawal_request_ids(
        `owner`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_lido_encode_withdrawal_statuses(
        `requestIds`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_payment_decode_url(
        `string`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_solana_decode_metadata(
        `base64Str`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_solana_derive_metadata_pda(
        `mint`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_sui_encode_split_stake(
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_sui_encode_token_transfer(
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_sui_encode_transfer(
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_sui_encode_unstake(
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_sui_validate_and_hash(
        `encoded`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_ton_base64_to_hex_address(
        `base64Str`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_ton_decode_jetton_address(
        `base64Data`: RustBuffer.ByValue,
        `len`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_ton_encode_get_wallet_address(
        `address`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_gemstone_fn_func_ton_hex_to_base64_address(
        `hexStr`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_gemstone_rustbuffer_alloc(
        `size`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_gemstone_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_gemstone_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_gemstone_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_gemstone_rust_future_poll_u8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_u8(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_u8(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_u8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_gemstone_rust_future_poll_i8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_i8(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_i8(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_i8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_gemstone_rust_future_poll_u16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_u16(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_u16(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_u16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_gemstone_rust_future_poll_i16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_i16(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_i16(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_i16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_gemstone_rust_future_poll_u32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_u32(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_u32(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_u32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_gemstone_rust_future_poll_i32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_i32(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_i32(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_i32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_gemstone_rust_future_poll_u64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_u64(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_u64(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_u64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_gemstone_rust_future_poll_i64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_i64(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_i64(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_i64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_gemstone_rust_future_poll_f32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_f32(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_f32(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_f32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Float

    fun ffi_gemstone_rust_future_poll_f64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_f64(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_f64(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_f64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Double

    fun ffi_gemstone_rust_future_poll_pointer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_pointer(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_pointer(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_pointer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun ffi_gemstone_rust_future_poll_rust_buffer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_rust_buffer(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_rust_buffer(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_rust_buffer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_gemstone_rust_future_poll_void(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_gemstone_rust_future_cancel_void(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_free_void(`handle`: Long): Unit

    fun ffi_gemstone_rust_future_complete_void(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_gemstone_checksum_func_asset_default_rank(): Short

    fun uniffi_gemstone_checksum_func_asset_wrapper(): Short

    fun uniffi_gemstone_checksum_func_bsc_decode_delegations_return(): Short

    fun uniffi_gemstone_checksum_func_bsc_decode_undelegations_return(): Short

    fun uniffi_gemstone_checksum_func_bsc_decode_validators_return(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_claim_call(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_delegate_call(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_delegations_call(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_redelegate_call(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_undelegate_call(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_undelegations_call(): Short

    fun uniffi_gemstone_checksum_func_bsc_encode_validators_call(): Short

    fun uniffi_gemstone_checksum_func_cosmos_convert_hrp(): Short

    fun uniffi_gemstone_checksum_func_lib_version(): Short

    fun uniffi_gemstone_checksum_func_lido_decode_get_withdrawal_statuses(): Short

    fun uniffi_gemstone_checksum_func_lido_decode_request_withdrawals_return(): Short

    fun uniffi_gemstone_checksum_func_lido_decode_withdrawal_request_ids(): Short

    fun uniffi_gemstone_checksum_func_lido_encode_claim_withdrawal(): Short

    fun uniffi_gemstone_checksum_func_lido_encode_request_withdrawals(): Short

    fun uniffi_gemstone_checksum_func_lido_encode_submit(): Short

    fun uniffi_gemstone_checksum_func_lido_encode_withdrawal_request_ids(): Short

    fun uniffi_gemstone_checksum_func_lido_encode_withdrawal_statuses(): Short

    fun uniffi_gemstone_checksum_func_payment_decode_url(): Short

    fun uniffi_gemstone_checksum_func_solana_decode_metadata(): Short

    fun uniffi_gemstone_checksum_func_solana_derive_metadata_pda(): Short

    fun uniffi_gemstone_checksum_func_sui_encode_split_stake(): Short

    fun uniffi_gemstone_checksum_func_sui_encode_token_transfer(): Short

    fun uniffi_gemstone_checksum_func_sui_encode_transfer(): Short

    fun uniffi_gemstone_checksum_func_sui_encode_unstake(): Short

    fun uniffi_gemstone_checksum_func_sui_validate_and_hash(): Short

    fun uniffi_gemstone_checksum_func_ton_base64_to_hex_address(): Short

    fun uniffi_gemstone_checksum_func_ton_decode_jetton_address(): Short

    fun uniffi_gemstone_checksum_func_ton_encode_get_wallet_address(): Short

    fun uniffi_gemstone_checksum_func_ton_hex_to_base64_address(): Short

    fun uniffi_gemstone_checksum_method_config_get_bitcoin_chain_config(): Short

    fun uniffi_gemstone_checksum_method_config_get_block_explorers(): Short

    fun uniffi_gemstone_checksum_method_config_get_chain_config(): Short

    fun uniffi_gemstone_checksum_method_config_get_docs_url(): Short

    fun uniffi_gemstone_checksum_method_config_get_evm_chain_config(): Short

    fun uniffi_gemstone_checksum_method_config_get_nodes(): Short

    fun uniffi_gemstone_checksum_method_config_get_nodes_for_chain(): Short

    fun uniffi_gemstone_checksum_method_config_get_public_url(): Short

    fun uniffi_gemstone_checksum_method_config_get_social_url(): Short

    fun uniffi_gemstone_checksum_method_config_get_solana_token_program(): Short

    fun uniffi_gemstone_checksum_method_config_get_solana_token_program_id(): Short

    fun uniffi_gemstone_checksum_method_config_get_stake_config(): Short

    fun uniffi_gemstone_checksum_method_config_get_validators(): Short

    fun uniffi_gemstone_checksum_method_config_get_wallet_connect_config(): Short

    fun uniffi_gemstone_checksum_method_config_image_formatter_asset_url(): Short

    fun uniffi_gemstone_checksum_method_config_image_formatter_validator_url(): Short

    fun uniffi_gemstone_checksum_method_explorer_get_address_url(): Short

    fun uniffi_gemstone_checksum_method_explorer_get_token_url(): Short

    fun uniffi_gemstone_checksum_method_explorer_get_transaction_url(): Short

    fun uniffi_gemstone_checksum_method_walletconnectnamespace_get_namespace(): Short

    fun uniffi_gemstone_checksum_method_walletconnectnamespace_get_reference(): Short

    fun uniffi_gemstone_checksum_constructor_config_new(): Short

    fun uniffi_gemstone_checksum_constructor_explorer_new(): Short

    fun uniffi_gemstone_checksum_constructor_walletconnectnamespace_new(): Short

    fun ffi_gemstone_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_gemstone_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_gemstone_checksum_func_asset_default_rank() != 18436.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_asset_wrapper() != 22901.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_decode_delegations_return() != 12911.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_decode_undelegations_return() != 54978.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_decode_validators_return() != 52730.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_claim_call() != 27554.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_delegate_call() != 16844.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_delegations_call() != 57773.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_redelegate_call() != 45564.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_undelegate_call() != 8022.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_undelegations_call() != 14526.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_bsc_encode_validators_call() != 15414.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_cosmos_convert_hrp() != 59064.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lib_version() != 54725.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_decode_get_withdrawal_statuses() != 9208.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_decode_request_withdrawals_return() != 34885.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_decode_withdrawal_request_ids() != 6923.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_encode_claim_withdrawal() != 2934.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_encode_request_withdrawals() != 44714.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_encode_submit() != 14847.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_encode_withdrawal_request_ids() != 1987.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_lido_encode_withdrawal_statuses() != 3367.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_payment_decode_url() != 3196.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_solana_decode_metadata() != 52739.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_solana_derive_metadata_pda() != 49890.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_sui_encode_split_stake() != 18396.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_sui_encode_token_transfer() != 40229.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_sui_encode_transfer() != 20842.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_sui_encode_unstake() != 16304.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_sui_validate_and_hash() != 24055.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_ton_base64_to_hex_address() != 41547.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_ton_decode_jetton_address() != 60035.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_ton_encode_get_wallet_address() != 63645.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_func_ton_hex_to_base64_address() != 2835.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_bitcoin_chain_config() != 55255.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_block_explorers() != 48094.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_chain_config() != 35682.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_docs_url() != 48896.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_evm_chain_config() != 62983.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_nodes() != 3747.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_nodes_for_chain() != 50401.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_public_url() != 56730.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_social_url() != 13335.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_solana_token_program() != 15556.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_solana_token_program_id() != 35025.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_stake_config() != 18495.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_validators() != 27239.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_get_wallet_connect_config() != 40625.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_image_formatter_asset_url() != 61051.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_config_image_formatter_validator_url() != 18028.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_explorer_get_address_url() != 23888.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_explorer_get_token_url() != 542.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_explorer_get_transaction_url() != 59021.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_walletconnectnamespace_get_namespace() != 9477.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_method_walletconnectnamespace_get_reference() != 37511.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_constructor_config_new() != 65388.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_constructor_explorer_new() != 63060.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_gemstone_checksum_constructor_walletconnectnamespace_new() != 27585.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()

    companion object {
        fun destroy(vararg args: Any?) {
            args
                .filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUShort : FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort = value.toUShort()

    override fun read(buf: ByteBuffer): UShort = lift(buf.getShort())

    override fun lower(value: UShort): Short = value.toShort()

    override fun allocationSize(value: UShort) = 2UL

    override fun write(
        value: UShort,
        buf: ByteBuffer,
    ) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterInt : FfiConverter<Int, Int> {
    override fun lift(value: Int): Int = value

    override fun read(buf: ByteBuffer): Int = buf.getInt()

    override fun lower(value: Int): Int = value

    override fun allocationSize(value: Int) = 4UL

    override fun write(
        value: Int,
        buf: ByteBuffer,
    ) {
        buf.putInt(value)
    }
}

public object FfiConverterULong : FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong = value.toULong()

    override fun read(buf: ByteBuffer): ULong = lift(buf.getLong())

    override fun lower(value: ULong): Long = value.toLong()

    override fun allocationSize(value: ULong) = 8UL

    override fun write(
        value: ULong,
        buf: ByteBuffer,
    ) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterDouble : FfiConverter<Double, Double> {
    override fun lift(value: Double): Double = value

    override fun read(buf: ByteBuffer): Double = buf.getDouble()

    override fun lower(value: Double): Double = value

    override fun allocationSize(value: Double) = 8UL

    override fun write(
        value: Double,
        buf: ByteBuffer,
    ) {
        buf.putDouble(value)
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean = value.toInt() != 0

    override fun read(buf: ByteBuffer): Boolean = lift(buf.get())

    override fun lower(value: Boolean): Byte = if (value) 1.toByte() else 0.toByte()

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(
        value: Boolean,
        buf: ByteBuffer,
    ) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(
        value: String,
        buf: ByteBuffer,
    ) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray : FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }

    override fun allocationSize(value: ByteArray): ULong = 4UL + value.size.toULong()

    override fun write(
        value: ByteArray,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        buf.put(value)
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner =
        com.sun.jna.internal.Cleaner
            .getCleaner()

    override fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable = UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner =
        java.lang.ref.Cleaner
            .create()

    override fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable = JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * Config
 */
public interface ConfigInterface {
    fun `getBitcoinChainConfig`(`chain`: kotlin.String): BitcoinChainConfig

    fun `getBlockExplorers`(`chain`: kotlin.String): List<kotlin.String>

    fun `getChainConfig`(`chain`: kotlin.String): ChainConfig

    fun `getDocsUrl`(`item`: DocsUrl): kotlin.String

    fun `getEvmChainConfig`(`chain`: kotlin.String): EvmChainConfig

    fun `getNodes`(): Map<kotlin.String, List<Node>>

    fun `getNodesForChain`(`chain`: kotlin.String): List<Node>

    fun `getPublicUrl`(`item`: PublicUrl): kotlin.String

    fun `getSocialUrl`(`item`: SocialUrl): kotlin.String?

    fun `getSolanaTokenProgram`(`id`: kotlin.String): kotlin.String

    fun `getSolanaTokenProgramId`(`address`: kotlin.String): kotlin.String?

    fun `getStakeConfig`(`chain`: kotlin.String): StakeChainConfig

    fun `getValidators`(): Map<kotlin.String, List<kotlin.String>>

    fun `getWalletConnectConfig`(): WalletConnectConfig

    fun `imageFormatterAssetUrl`(
        `chain`: kotlin.String,
        `tokenId`: kotlin.String?,
    ): kotlin.String

    fun `imageFormatterValidatorUrl`(
        `chain`: kotlin.String,
        `id`: kotlin.String,
    ): kotlin.String

    companion object
}

/**
 * Config
 */
open class Config :
    Disposable,
    AutoCloseable,
    ConfigInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor() :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_gemstone_fn_constructor_config_new(
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_free_config(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_clone_config(pointer!!, status)
        }

    override fun `getBitcoinChainConfig`(`chain`: kotlin.String): BitcoinChainConfig =
        FfiConverterTypeBitcoinChainConfig.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_bitcoin_chain_config(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getBlockExplorers`(`chain`: kotlin.String): List<kotlin.String> =
        FfiConverterSequenceString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_block_explorers(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getChainConfig`(`chain`: kotlin.String): ChainConfig =
        FfiConverterTypeChainConfig.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_chain_config(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getDocsUrl`(`item`: DocsUrl): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_docs_url(
                        it,
                        FfiConverterTypeDocsUrl.lower(`item`),
                        _status,
                    )
                }
            },
        )

    override fun `getEvmChainConfig`(`chain`: kotlin.String): EvmChainConfig =
        FfiConverterTypeEVMChainConfig.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_evm_chain_config(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getNodes`(): Map<kotlin.String, List<Node>> =
        FfiConverterMapStringSequenceTypeNode.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_nodes(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `getNodesForChain`(`chain`: kotlin.String): List<Node> =
        FfiConverterSequenceTypeNode.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_nodes_for_chain(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getPublicUrl`(`item`: PublicUrl): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_public_url(
                        it,
                        FfiConverterTypePublicUrl.lower(`item`),
                        _status,
                    )
                }
            },
        )

    override fun `getSocialUrl`(`item`: SocialUrl): kotlin.String? =
        FfiConverterOptionalString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_social_url(
                        it,
                        FfiConverterTypeSocialUrl.lower(`item`),
                        _status,
                    )
                }
            },
        )

    override fun `getSolanaTokenProgram`(`id`: kotlin.String): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_solana_token_program(
                        it,
                        FfiConverterString.lower(`id`),
                        _status,
                    )
                }
            },
        )

    override fun `getSolanaTokenProgramId`(`address`: kotlin.String): kotlin.String? =
        FfiConverterOptionalString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_solana_token_program_id(
                        it,
                        FfiConverterString.lower(`address`),
                        _status,
                    )
                }
            },
        )

    override fun `getStakeConfig`(`chain`: kotlin.String): StakeChainConfig =
        FfiConverterTypeStakeChainConfig.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_stake_config(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getValidators`(): Map<kotlin.String, List<kotlin.String>> =
        FfiConverterMapStringSequenceString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_validators(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `getWalletConnectConfig`(): WalletConnectConfig =
        FfiConverterTypeWalletConnectConfig.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_get_wallet_connect_config(
                        it,
                        _status,
                    )
                }
            },
        )

    override fun `imageFormatterAssetUrl`(
        `chain`: kotlin.String,
        `tokenId`: kotlin.String?,
    ): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_image_formatter_asset_url(
                        it,
                        FfiConverterString.lower(`chain`),
                        FfiConverterOptionalString.lower(`tokenId`),
                        _status,
                    )
                }
            },
        )

    override fun `imageFormatterValidatorUrl`(
        `chain`: kotlin.String,
        `id`: kotlin.String,
    ): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_config_image_formatter_validator_url(
                        it,
                        FfiConverterString.lower(`chain`),
                        FfiConverterString.lower(`id`),
                        _status,
                    )
                }
            },
        )

    companion object
}

public object FfiConverterTypeConfig : FfiConverter<Config, Pointer> {
    override fun lower(value: Config): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): Config = Config(value)

    override fun read(buf: ByteBuffer): Config {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Config) = 8UL

    override fun write(
        value: Config,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

public interface ExplorerInterface {
    fun `getAddressUrl`(
        `explorerName`: kotlin.String,
        `address`: kotlin.String,
    ): kotlin.String

    fun `getTokenUrl`(
        `explorerName`: kotlin.String,
        `address`: kotlin.String,
    ): kotlin.String?

    fun `getTransactionUrl`(
        `explorerName`: kotlin.String,
        `transactionId`: kotlin.String,
    ): kotlin.String

    companion object
}

open class Explorer :
    Disposable,
    AutoCloseable,
    ExplorerInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor(`chain`: kotlin.String) :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_gemstone_fn_constructor_explorer_new(
                    FfiConverterString.lower(`chain`),
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_free_explorer(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_clone_explorer(pointer!!, status)
        }

    override fun `getAddressUrl`(
        `explorerName`: kotlin.String,
        `address`: kotlin.String,
    ): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_explorer_get_address_url(
                        it,
                        FfiConverterString.lower(`explorerName`),
                        FfiConverterString.lower(`address`),
                        _status,
                    )
                }
            },
        )

    override fun `getTokenUrl`(
        `explorerName`: kotlin.String,
        `address`: kotlin.String,
    ): kotlin.String? =
        FfiConverterOptionalString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_explorer_get_token_url(
                        it,
                        FfiConverterString.lower(`explorerName`),
                        FfiConverterString.lower(`address`),
                        _status,
                    )
                }
            },
        )

    override fun `getTransactionUrl`(
        `explorerName`: kotlin.String,
        `transactionId`: kotlin.String,
    ): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_explorer_get_transaction_url(
                        it,
                        FfiConverterString.lower(`explorerName`),
                        FfiConverterString.lower(`transactionId`),
                        _status,
                    )
                }
            },
        )

    companion object
}

public object FfiConverterTypeExplorer : FfiConverter<Explorer, Pointer> {
    override fun lower(value: Explorer): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): Explorer = Explorer(value)

    override fun read(buf: ByteBuffer): Explorer {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Explorer) = 8UL

    override fun write(
        value: Explorer,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * WalletConnect
 */
public interface WalletConnectNamespaceInterface {
    fun `getNamespace`(`chain`: kotlin.String): kotlin.String?

    fun `getReference`(`chain`: kotlin.String): kotlin.String?

    companion object
}

/**
 * WalletConnect
 */
open class WalletConnectNamespace :
    Disposable,
    AutoCloseable,
    WalletConnectNamespaceInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor() :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_gemstone_fn_constructor_walletconnectnamespace_new(
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_free_walletconnectnamespace(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_clone_walletconnectnamespace(pointer!!, status)
        }

    override fun `getNamespace`(`chain`: kotlin.String): kotlin.String? =
        FfiConverterOptionalString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_walletconnectnamespace_get_namespace(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    override fun `getReference`(`chain`: kotlin.String): kotlin.String? =
        FfiConverterOptionalString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_gemstone_fn_method_walletconnectnamespace_get_reference(
                        it,
                        FfiConverterString.lower(`chain`),
                        _status,
                    )
                }
            },
        )

    companion object
}

public object FfiConverterTypeWalletConnectNamespace : FfiConverter<WalletConnectNamespace, Pointer> {
    override fun lower(value: WalletConnectNamespace): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): WalletConnectNamespace = WalletConnectNamespace(value)

    override fun read(buf: ByteBuffer): WalletConnectNamespace {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: WalletConnectNamespace) = 8UL

    override fun write(
        value: WalletConnectNamespace,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

data class AssetWrapper(
    var `id`: kotlin.String,
    var `name`: kotlin.String,
    var `symbol`: kotlin.String,
    var `decimals`: kotlin.Int,
    var `assetType`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeAssetWrapper : FfiConverterRustBuffer<AssetWrapper> {
    override fun read(buf: ByteBuffer): AssetWrapper =
        AssetWrapper(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterString.read(buf),
        )

    override fun allocationSize(value: AssetWrapper) =
        (
            FfiConverterString.allocationSize(value.`id`) +
                FfiConverterString.allocationSize(value.`name`) +
                FfiConverterString.allocationSize(value.`symbol`) +
                FfiConverterInt.allocationSize(value.`decimals`) +
                FfiConverterString.allocationSize(value.`assetType`)
        )

    override fun write(
        value: AssetWrapper,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`id`, buf)
        FfiConverterString.write(value.`name`, buf)
        FfiConverterString.write(value.`symbol`, buf)
        FfiConverterInt.write(value.`decimals`, buf)
        FfiConverterString.write(value.`assetType`, buf)
    }
}

data class BitcoinChainConfig(
    var `blocksFeePriority`: BlocksFeePriority,
) {
    companion object
}

public object FfiConverterTypeBitcoinChainConfig : FfiConverterRustBuffer<BitcoinChainConfig> {
    override fun read(buf: ByteBuffer): BitcoinChainConfig =
        BitcoinChainConfig(
            FfiConverterTypeBlocksFeePriority.read(buf),
        )

    override fun allocationSize(value: BitcoinChainConfig) =
        (
            FfiConverterTypeBlocksFeePriority.allocationSize(value.`blocksFeePriority`)
        )

    override fun write(
        value: BitcoinChainConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterTypeBlocksFeePriority.write(value.`blocksFeePriority`, buf)
    }
}

data class BlocksFeePriority(
    var `normal`: kotlin.Int,
    var `slow`: kotlin.Int,
    var `fast`: kotlin.Int,
) {
    companion object
}

public object FfiConverterTypeBlocksFeePriority : FfiConverterRustBuffer<BlocksFeePriority> {
    override fun read(buf: ByteBuffer): BlocksFeePriority =
        BlocksFeePriority(
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
        )

    override fun allocationSize(value: BlocksFeePriority) =
        (
            FfiConverterInt.allocationSize(value.`normal`) +
                FfiConverterInt.allocationSize(value.`slow`) +
                FfiConverterInt.allocationSize(value.`fast`)
        )

    override fun write(
        value: BlocksFeePriority,
        buf: ByteBuffer,
    ) {
        FfiConverterInt.write(value.`normal`, buf)
        FfiConverterInt.write(value.`slow`, buf)
        FfiConverterInt.write(value.`fast`, buf)
    }
}

data class BscDelegation(
    var `delegatorAddress`: kotlin.String,
    var `validatorAddress`: kotlin.String,
    var `amount`: kotlin.String,
    var `shares`: kotlin.String,
    var `status`: BscDelegationStatus,
    var `unlockTime`: kotlin.ULong?,
) {
    companion object
}

public object FfiConverterTypeBscDelegation : FfiConverterRustBuffer<BscDelegation> {
    override fun read(buf: ByteBuffer): BscDelegation =
        BscDelegation(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeBscDelegationStatus.read(buf),
            FfiConverterOptionalULong.read(buf),
        )

    override fun allocationSize(value: BscDelegation) =
        (
            FfiConverterString.allocationSize(value.`delegatorAddress`) +
                FfiConverterString.allocationSize(value.`validatorAddress`) +
                FfiConverterString.allocationSize(value.`amount`) +
                FfiConverterString.allocationSize(value.`shares`) +
                FfiConverterTypeBscDelegationStatus.allocationSize(value.`status`) +
                FfiConverterOptionalULong.allocationSize(value.`unlockTime`)
        )

    override fun write(
        value: BscDelegation,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`delegatorAddress`, buf)
        FfiConverterString.write(value.`validatorAddress`, buf)
        FfiConverterString.write(value.`amount`, buf)
        FfiConverterString.write(value.`shares`, buf)
        FfiConverterTypeBscDelegationStatus.write(value.`status`, buf)
        FfiConverterOptionalULong.write(value.`unlockTime`, buf)
    }
}

data class BscValidator(
    var `operatorAddress`: kotlin.String,
    var `moniker`: kotlin.String,
    var `commission`: kotlin.ULong,
    var `apy`: kotlin.ULong,
    var `jailed`: kotlin.Boolean,
) {
    companion object
}

public object FfiConverterTypeBscValidator : FfiConverterRustBuffer<BscValidator> {
    override fun read(buf: ByteBuffer): BscValidator =
        BscValidator(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
        )

    override fun allocationSize(value: BscValidator) =
        (
            FfiConverterString.allocationSize(value.`operatorAddress`) +
                FfiConverterString.allocationSize(value.`moniker`) +
                FfiConverterULong.allocationSize(value.`commission`) +
                FfiConverterULong.allocationSize(value.`apy`) +
                FfiConverterBoolean.allocationSize(value.`jailed`)
        )

    override fun write(
        value: BscValidator,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`operatorAddress`, buf)
        FfiConverterString.write(value.`moniker`, buf)
        FfiConverterULong.write(value.`commission`, buf)
        FfiConverterULong.write(value.`apy`, buf)
        FfiConverterBoolean.write(value.`jailed`, buf)
    }
}

data class ChainConfig(
    var `networkId`: kotlin.String,
    var `transactionTimeout`: kotlin.Double,
    var `slip44`: kotlin.Int,
    var `rank`: kotlin.Int,
    var `denom`: kotlin.String?,
    var `defaultAssetType`: kotlin.String?,
    var `accountActivationFee`: kotlin.Int?,
) {
    companion object
}

public object FfiConverterTypeChainConfig : FfiConverterRustBuffer<ChainConfig> {
    override fun read(buf: ByteBuffer): ChainConfig =
        ChainConfig(
            FfiConverterString.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalInt.read(buf),
        )

    override fun allocationSize(value: ChainConfig) =
        (
            FfiConverterString.allocationSize(value.`networkId`) +
                FfiConverterDouble.allocationSize(value.`transactionTimeout`) +
                FfiConverterInt.allocationSize(value.`slip44`) +
                FfiConverterInt.allocationSize(value.`rank`) +
                FfiConverterOptionalString.allocationSize(value.`denom`) +
                FfiConverterOptionalString.allocationSize(value.`defaultAssetType`) +
                FfiConverterOptionalInt.allocationSize(value.`accountActivationFee`)
        )

    override fun write(
        value: ChainConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`networkId`, buf)
        FfiConverterDouble.write(value.`transactionTimeout`, buf)
        FfiConverterInt.write(value.`slip44`, buf)
        FfiConverterInt.write(value.`rank`, buf)
        FfiConverterOptionalString.write(value.`denom`, buf)
        FfiConverterOptionalString.write(value.`defaultAssetType`, buf)
        FfiConverterOptionalInt.write(value.`accountActivationFee`, buf)
    }
}

data class Erc2612Permit(
    var `value`: kotlin.String,
    var `deadline`: kotlin.ULong,
    var `signature`: kotlin.ByteArray,
) {
    companion object
}

public object FfiConverterTypeERC2612Permit : FfiConverterRustBuffer<Erc2612Permit> {
    override fun read(buf: ByteBuffer): Erc2612Permit =
        Erc2612Permit(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterByteArray.read(buf),
        )

    override fun allocationSize(value: Erc2612Permit) =
        (
            FfiConverterString.allocationSize(value.`value`) +
                FfiConverterULong.allocationSize(value.`deadline`) +
                FfiConverterByteArray.allocationSize(value.`signature`)
        )

    override fun write(
        value: Erc2612Permit,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`value`, buf)
        FfiConverterULong.write(value.`deadline`, buf)
        FfiConverterByteArray.write(value.`signature`, buf)
    }
}

data class EvmChainConfig(
    var `minPriorityFee`: kotlin.ULong,
    var `isOpstack`: kotlin.Boolean,
    var `swapWhitelistContracts`: List<kotlin.String>,
) {
    companion object
}

public object FfiConverterTypeEVMChainConfig : FfiConverterRustBuffer<EvmChainConfig> {
    override fun read(buf: ByteBuffer): EvmChainConfig =
        EvmChainConfig(
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterSequenceString.read(buf),
        )

    override fun allocationSize(value: EvmChainConfig) =
        (
            FfiConverterULong.allocationSize(value.`minPriorityFee`) +
                FfiConverterBoolean.allocationSize(value.`isOpstack`) +
                FfiConverterSequenceString.allocationSize(value.`swapWhitelistContracts`)
        )

    override fun write(
        value: EvmChainConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterULong.write(value.`minPriorityFee`, buf)
        FfiConverterBoolean.write(value.`isOpstack`, buf)
        FfiConverterSequenceString.write(value.`swapWhitelistContracts`, buf)
    }
}

data class LidoWithdrawalRequest(
    var `amount`: kotlin.String,
    var `shares`: kotlin.String,
    var `owner`: kotlin.String,
    var `timestamp`: kotlin.ULong,
    var `isFinalized`: kotlin.Boolean,
    var `isClaimed`: kotlin.Boolean,
) {
    companion object
}

public object FfiConverterTypeLidoWithdrawalRequest : FfiConverterRustBuffer<LidoWithdrawalRequest> {
    override fun read(buf: ByteBuffer): LidoWithdrawalRequest =
        LidoWithdrawalRequest(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )

    override fun allocationSize(value: LidoWithdrawalRequest) =
        (
            FfiConverterString.allocationSize(value.`amount`) +
                FfiConverterString.allocationSize(value.`shares`) +
                FfiConverterString.allocationSize(value.`owner`) +
                FfiConverterULong.allocationSize(value.`timestamp`) +
                FfiConverterBoolean.allocationSize(value.`isFinalized`) +
                FfiConverterBoolean.allocationSize(value.`isClaimed`)
        )

    override fun write(
        value: LidoWithdrawalRequest,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`amount`, buf)
        FfiConverterString.write(value.`shares`, buf)
        FfiConverterString.write(value.`owner`, buf)
        FfiConverterULong.write(value.`timestamp`, buf)
        FfiConverterBoolean.write(value.`isFinalized`, buf)
        FfiConverterBoolean.write(value.`isClaimed`, buf)
    }
}

data class MplMetadata(
    var `mint`: kotlin.String,
    var `name`: kotlin.String,
    var `symbol`: kotlin.String,
    var `uri`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeMplMetadata : FfiConverterRustBuffer<MplMetadata> {
    override fun read(buf: ByteBuffer): MplMetadata =
        MplMetadata(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )

    override fun allocationSize(value: MplMetadata) =
        (
            FfiConverterString.allocationSize(value.`mint`) +
                FfiConverterString.allocationSize(value.`name`) +
                FfiConverterString.allocationSize(value.`symbol`) +
                FfiConverterString.allocationSize(value.`uri`)
        )

    override fun write(
        value: MplMetadata,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`mint`, buf)
        FfiConverterString.write(value.`name`, buf)
        FfiConverterString.write(value.`symbol`, buf)
        FfiConverterString.write(value.`uri`, buf)
    }
}

data class Node(
    var `url`: kotlin.String,
    var `priority`: NodePriority,
) {
    companion object
}

public object FfiConverterTypeNode : FfiConverterRustBuffer<Node> {
    override fun read(buf: ByteBuffer): Node =
        Node(
            FfiConverterString.read(buf),
            FfiConverterTypeNodePriority.read(buf),
        )

    override fun allocationSize(value: Node) =
        (
            FfiConverterString.allocationSize(value.`url`) +
                FfiConverterTypeNodePriority.allocationSize(value.`priority`)
        )

    override fun write(
        value: Node,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`url`, buf)
        FfiConverterTypeNodePriority.write(value.`priority`, buf)
    }
}

data class PaymentWrapper(
    var `address`: kotlin.String,
    var `amount`: kotlin.String?,
    var `memo`: kotlin.String?,
    var `assetId`: kotlin.String?,
) {
    companion object
}

public object FfiConverterTypePaymentWrapper : FfiConverterRustBuffer<PaymentWrapper> {
    override fun read(buf: ByteBuffer): PaymentWrapper =
        PaymentWrapper(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )

    override fun allocationSize(value: PaymentWrapper) =
        (
            FfiConverterString.allocationSize(value.`address`) +
                FfiConverterOptionalString.allocationSize(value.`amount`) +
                FfiConverterOptionalString.allocationSize(value.`memo`) +
                FfiConverterOptionalString.allocationSize(value.`assetId`)
        )

    override fun write(
        value: PaymentWrapper,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`address`, buf)
        FfiConverterOptionalString.write(value.`amount`, buf)
        FfiConverterOptionalString.write(value.`memo`, buf)
        FfiConverterOptionalString.write(value.`assetId`, buf)
    }
}

data class StakeChainConfig(
    var `timeLock`: kotlin.ULong,
    var `minAmount`: kotlin.ULong,
    var `changeAmountOnUnstake`: kotlin.Boolean,
    var `redelegate`: kotlin.Boolean,
) {
    companion object
}

public object FfiConverterTypeStakeChainConfig : FfiConverterRustBuffer<StakeChainConfig> {
    override fun read(buf: ByteBuffer): StakeChainConfig =
        StakeChainConfig(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )

    override fun allocationSize(value: StakeChainConfig) =
        (
            FfiConverterULong.allocationSize(value.`timeLock`) +
                FfiConverterULong.allocationSize(value.`minAmount`) +
                FfiConverterBoolean.allocationSize(value.`changeAmountOnUnstake`) +
                FfiConverterBoolean.allocationSize(value.`redelegate`)
        )

    override fun write(
        value: StakeChainConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterULong.write(value.`timeLock`, buf)
        FfiConverterULong.write(value.`minAmount`, buf)
        FfiConverterBoolean.write(value.`changeAmountOnUnstake`, buf)
        FfiConverterBoolean.write(value.`redelegate`, buf)
    }
}

data class SuiCoin(
    var `coinType`: kotlin.String,
    var `balance`: kotlin.ULong,
    var `objectRef`: SuiObjectRef,
) {
    companion object
}

public object FfiConverterTypeSuiCoin : FfiConverterRustBuffer<SuiCoin> {
    override fun read(buf: ByteBuffer): SuiCoin =
        SuiCoin(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeSuiObjectRef.read(buf),
        )

    override fun allocationSize(value: SuiCoin) =
        (
            FfiConverterString.allocationSize(value.`coinType`) +
                FfiConverterULong.allocationSize(value.`balance`) +
                FfiConverterTypeSuiObjectRef.allocationSize(value.`objectRef`)
        )

    override fun write(
        value: SuiCoin,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`coinType`, buf)
        FfiConverterULong.write(value.`balance`, buf)
        FfiConverterTypeSuiObjectRef.write(value.`objectRef`, buf)
    }
}

data class SuiGas(
    var `budget`: kotlin.ULong,
    var `price`: kotlin.ULong,
) {
    companion object
}

public object FfiConverterTypeSuiGas : FfiConverterRustBuffer<SuiGas> {
    override fun read(buf: ByteBuffer): SuiGas =
        SuiGas(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )

    override fun allocationSize(value: SuiGas) =
        (
            FfiConverterULong.allocationSize(value.`budget`) +
                FfiConverterULong.allocationSize(value.`price`)
        )

    override fun write(
        value: SuiGas,
        buf: ByteBuffer,
    ) {
        FfiConverterULong.write(value.`budget`, buf)
        FfiConverterULong.write(value.`price`, buf)
    }
}

data class SuiObjectRef(
    var `objectId`: kotlin.String,
    var `digest`: kotlin.String,
    var `version`: kotlin.ULong,
) {
    companion object
}

public object FfiConverterTypeSuiObjectRef : FfiConverterRustBuffer<SuiObjectRef> {
    override fun read(buf: ByteBuffer): SuiObjectRef =
        SuiObjectRef(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
        )

    override fun allocationSize(value: SuiObjectRef) =
        (
            FfiConverterString.allocationSize(value.`objectId`) +
                FfiConverterString.allocationSize(value.`digest`) +
                FfiConverterULong.allocationSize(value.`version`)
        )

    override fun write(
        value: SuiObjectRef,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`objectId`, buf)
        FfiConverterString.write(value.`digest`, buf)
        FfiConverterULong.write(value.`version`, buf)
    }
}

data class SuiStakeInput(
    var `sender`: kotlin.String,
    var `validator`: kotlin.String,
    var `stakeAmount`: kotlin.ULong,
    var `gas`: SuiGas,
    var `coins`: List<SuiCoin>,
) {
    companion object
}

public object FfiConverterTypeSuiStakeInput : FfiConverterRustBuffer<SuiStakeInput> {
    override fun read(buf: ByteBuffer): SuiStakeInput =
        SuiStakeInput(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeSuiGas.read(buf),
            FfiConverterSequenceTypeSuiCoin.read(buf),
        )

    override fun allocationSize(value: SuiStakeInput) =
        (
            FfiConverterString.allocationSize(value.`sender`) +
                FfiConverterString.allocationSize(value.`validator`) +
                FfiConverterULong.allocationSize(value.`stakeAmount`) +
                FfiConverterTypeSuiGas.allocationSize(value.`gas`) +
                FfiConverterSequenceTypeSuiCoin.allocationSize(value.`coins`)
        )

    override fun write(
        value: SuiStakeInput,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`sender`, buf)
        FfiConverterString.write(value.`validator`, buf)
        FfiConverterULong.write(value.`stakeAmount`, buf)
        FfiConverterTypeSuiGas.write(value.`gas`, buf)
        FfiConverterSequenceTypeSuiCoin.write(value.`coins`, buf)
    }
}

data class SuiTokenTransferInput(
    var `sender`: kotlin.String,
    var `recipient`: kotlin.String,
    var `amount`: kotlin.ULong,
    var `tokens`: List<SuiCoin>,
    var `gas`: SuiGas,
    var `gasCoin`: SuiCoin,
) {
    companion object
}

public object FfiConverterTypeSuiTokenTransferInput : FfiConverterRustBuffer<SuiTokenTransferInput> {
    override fun read(buf: ByteBuffer): SuiTokenTransferInput =
        SuiTokenTransferInput(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceTypeSuiCoin.read(buf),
            FfiConverterTypeSuiGas.read(buf),
            FfiConverterTypeSuiCoin.read(buf),
        )

    override fun allocationSize(value: SuiTokenTransferInput) =
        (
            FfiConverterString.allocationSize(value.`sender`) +
                FfiConverterString.allocationSize(value.`recipient`) +
                FfiConverterULong.allocationSize(value.`amount`) +
                FfiConverterSequenceTypeSuiCoin.allocationSize(value.`tokens`) +
                FfiConverterTypeSuiGas.allocationSize(value.`gas`) +
                FfiConverterTypeSuiCoin.allocationSize(value.`gasCoin`)
        )

    override fun write(
        value: SuiTokenTransferInput,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`sender`, buf)
        FfiConverterString.write(value.`recipient`, buf)
        FfiConverterULong.write(value.`amount`, buf)
        FfiConverterSequenceTypeSuiCoin.write(value.`tokens`, buf)
        FfiConverterTypeSuiGas.write(value.`gas`, buf)
        FfiConverterTypeSuiCoin.write(value.`gasCoin`, buf)
    }
}

data class SuiTransferInput(
    var `sender`: kotlin.String,
    var `recipient`: kotlin.String,
    var `amount`: kotlin.ULong,
    var `coins`: List<SuiCoin>,
    var `sendMax`: kotlin.Boolean,
    var `gas`: SuiGas,
) {
    companion object
}

public object FfiConverterTypeSuiTransferInput : FfiConverterRustBuffer<SuiTransferInput> {
    override fun read(buf: ByteBuffer): SuiTransferInput =
        SuiTransferInput(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceTypeSuiCoin.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeSuiGas.read(buf),
        )

    override fun allocationSize(value: SuiTransferInput) =
        (
            FfiConverterString.allocationSize(value.`sender`) +
                FfiConverterString.allocationSize(value.`recipient`) +
                FfiConverterULong.allocationSize(value.`amount`) +
                FfiConverterSequenceTypeSuiCoin.allocationSize(value.`coins`) +
                FfiConverterBoolean.allocationSize(value.`sendMax`) +
                FfiConverterTypeSuiGas.allocationSize(value.`gas`)
        )

    override fun write(
        value: SuiTransferInput,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`sender`, buf)
        FfiConverterString.write(value.`recipient`, buf)
        FfiConverterULong.write(value.`amount`, buf)
        FfiConverterSequenceTypeSuiCoin.write(value.`coins`, buf)
        FfiConverterBoolean.write(value.`sendMax`, buf)
        FfiConverterTypeSuiGas.write(value.`gas`, buf)
    }
}

data class SuiTxOutput(
    var `txData`: kotlin.ByteArray,
    var `hash`: kotlin.ByteArray,
) {
    companion object
}

public object FfiConverterTypeSuiTxOutput : FfiConverterRustBuffer<SuiTxOutput> {
    override fun read(buf: ByteBuffer): SuiTxOutput =
        SuiTxOutput(
            FfiConverterByteArray.read(buf),
            FfiConverterByteArray.read(buf),
        )

    override fun allocationSize(value: SuiTxOutput) =
        (
            FfiConverterByteArray.allocationSize(value.`txData`) +
                FfiConverterByteArray.allocationSize(value.`hash`)
        )

    override fun write(
        value: SuiTxOutput,
        buf: ByteBuffer,
    ) {
        FfiConverterByteArray.write(value.`txData`, buf)
        FfiConverterByteArray.write(value.`hash`, buf)
    }
}

data class SuiUnstakeInput(
    var `sender`: kotlin.String,
    var `stakedSui`: SuiObjectRef,
    var `gas`: SuiGas,
    var `gasCoin`: SuiCoin,
) {
    companion object
}

public object FfiConverterTypeSuiUnstakeInput : FfiConverterRustBuffer<SuiUnstakeInput> {
    override fun read(buf: ByteBuffer): SuiUnstakeInput =
        SuiUnstakeInput(
            FfiConverterString.read(buf),
            FfiConverterTypeSuiObjectRef.read(buf),
            FfiConverterTypeSuiGas.read(buf),
            FfiConverterTypeSuiCoin.read(buf),
        )

    override fun allocationSize(value: SuiUnstakeInput) =
        (
            FfiConverterString.allocationSize(value.`sender`) +
                FfiConverterTypeSuiObjectRef.allocationSize(value.`stakedSui`) +
                FfiConverterTypeSuiGas.allocationSize(value.`gas`) +
                FfiConverterTypeSuiCoin.allocationSize(value.`gasCoin`)
        )

    override fun write(
        value: SuiUnstakeInput,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`sender`, buf)
        FfiConverterTypeSuiObjectRef.write(value.`stakedSui`, buf)
        FfiConverterTypeSuiGas.write(value.`gas`, buf)
        FfiConverterTypeSuiCoin.write(value.`gasCoin`, buf)
    }
}

data class WalletConnectConfig(
    var `chains`: List<kotlin.String>,
) {
    companion object
}

public object FfiConverterTypeWalletConnectConfig : FfiConverterRustBuffer<WalletConnectConfig> {
    override fun read(buf: ByteBuffer): WalletConnectConfig =
        WalletConnectConfig(
            FfiConverterSequenceString.read(buf),
        )

    override fun allocationSize(value: WalletConnectConfig) =
        (
            FfiConverterSequenceString.allocationSize(value.`chains`)
        )

    override fun write(
        value: WalletConnectConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterSequenceString.write(value.`chains`, buf)
    }
}

enum class BscDelegationStatus {
    ACTIVE,
    UNDELEGATING,
    ;

    companion object
}

public object FfiConverterTypeBscDelegationStatus : FfiConverterRustBuffer<BscDelegationStatus> {
    override fun read(buf: ByteBuffer) =
        try {
            BscDelegationStatus.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: BscDelegationStatus) = 4UL

    override fun write(
        value: BscDelegationStatus,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

enum class DocsUrl {
    START,
    WHAT_IS_WATCH_WALLET,
    WHAT_IS_SECRET_PHRASE,
    WHAT_IS_PRIVATE_KEY,
    HOW_TO_SECURE_SECRET_PHRASE,
    TRANSACTION_STATUS,
    NETWORK_FEES,
    STAKING_LOCK_TIME,
    ;

    companion object
}

public object FfiConverterTypeDocsUrl : FfiConverterRustBuffer<DocsUrl> {
    override fun read(buf: ByteBuffer) =
        try {
            DocsUrl.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: DocsUrl) = 4UL

    override fun write(
        value: DocsUrl,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

/**
 * GemstoneError
 */
sealed class GemstoneException : kotlin.Exception() {
    class AnyException(
        val `msg`: kotlin.String,
    ) : GemstoneException() {
        override val message
            get() = "msg=${ `msg` }"
    }

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<GemstoneException> {
        override fun lift(error_buf: RustBuffer.ByValue): GemstoneException = FfiConverterTypeGemstoneError.lift(error_buf)
    }
}

public object FfiConverterTypeGemstoneError : FfiConverterRustBuffer<GemstoneException> {
    override fun read(buf: ByteBuffer): GemstoneException =
        when (buf.getInt()) {
            1 ->
                GemstoneException.AnyException(
                    FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: GemstoneException): ULong =
        when (value) {
            is GemstoneException.AnyException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL +
                    FfiConverterString.allocationSize(value.`msg`)
            )
        }

    override fun write(
        value: GemstoneException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is GemstoneException.AnyException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

enum class NodePriority {
    HIGH,
    MEDIUM,
    LOW,
    INACTIVE,
    ;

    companion object
}

public object FfiConverterTypeNodePriority : FfiConverterRustBuffer<NodePriority> {
    override fun read(buf: ByteBuffer) =
        try {
            NodePriority.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: NodePriority) = 4UL

    override fun write(
        value: NodePriority,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

enum class PublicUrl {
    WEBSITE,
    ASSETS,
    PRIVACY_POLICY,
    TERMS_OF_SERVICE,
    SUPPORT,
    CODEBASE_IOS,
    CODEBASE_ANDROID,
    APP_STORE,
    PLAY_STORE,
    APK,
    ;

    companion object
}

public object FfiConverterTypePublicUrl : FfiConverterRustBuffer<PublicUrl> {
    override fun read(buf: ByteBuffer) =
        try {
            PublicUrl.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: PublicUrl) = 4UL

    override fun write(
        value: PublicUrl,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

enum class SocialUrl {
    X,
    DISCORD,
    REDDIT,
    TELEGRAM,
    GIT_HUB,
    YOU_TUBE,
    FACEBOOK,
    HOMEPAGE,
    COINGECKO,
    ;

    companion object
}

public object FfiConverterTypeSocialUrl : FfiConverterRustBuffer<SocialUrl> {
    override fun read(buf: ByteBuffer) =
        try {
            SocialUrl.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: SocialUrl) = 4UL

    override fun write(
        value: SocialUrl,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

public object FfiConverterOptionalInt : FfiConverterRustBuffer<kotlin.Int?> {
    override fun read(buf: ByteBuffer): kotlin.Int? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterInt.read(buf)
    }

    override fun allocationSize(value: kotlin.Int?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterInt.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.Int?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterInt.write(value, buf)
        }
    }
}

public object FfiConverterOptionalULong : FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.ULong?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.String?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterSequenceString : FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<kotlin.String>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeBscDelegation : FfiConverterRustBuffer<List<BscDelegation>> {
    override fun read(buf: ByteBuffer): List<BscDelegation> {
        val len = buf.getInt()
        return List<BscDelegation>(len) {
            FfiConverterTypeBscDelegation.read(buf)
        }
    }

    override fun allocationSize(value: List<BscDelegation>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeBscDelegation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<BscDelegation>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeBscDelegation.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeBscValidator : FfiConverterRustBuffer<List<BscValidator>> {
    override fun read(buf: ByteBuffer): List<BscValidator> {
        val len = buf.getInt()
        return List<BscValidator>(len) {
            FfiConverterTypeBscValidator.read(buf)
        }
    }

    override fun allocationSize(value: List<BscValidator>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeBscValidator.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<BscValidator>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeBscValidator.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeLidoWithdrawalRequest : FfiConverterRustBuffer<List<LidoWithdrawalRequest>> {
    override fun read(buf: ByteBuffer): List<LidoWithdrawalRequest> {
        val len = buf.getInt()
        return List<LidoWithdrawalRequest>(len) {
            FfiConverterTypeLidoWithdrawalRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<LidoWithdrawalRequest>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeLidoWithdrawalRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<LidoWithdrawalRequest>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeLidoWithdrawalRequest.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeNode : FfiConverterRustBuffer<List<Node>> {
    override fun read(buf: ByteBuffer): List<Node> {
        val len = buf.getInt()
        return List<Node>(len) {
            FfiConverterTypeNode.read(buf)
        }
    }

    override fun allocationSize(value: List<Node>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeNode.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Node>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeNode.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeSuiCoin : FfiConverterRustBuffer<List<SuiCoin>> {
    override fun read(buf: ByteBuffer): List<SuiCoin> {
        val len = buf.getInt()
        return List<SuiCoin>(len) {
            FfiConverterTypeSuiCoin.read(buf)
        }
    }

    override fun allocationSize(value: List<SuiCoin>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeSuiCoin.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<SuiCoin>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeSuiCoin.write(it, buf)
        }
    }
}

public object FfiConverterMapStringSequenceString : FfiConverterRustBuffer<Map<kotlin.String, List<kotlin.String>>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, List<kotlin.String>> {
        val len = buf.getInt()
        return buildMap<kotlin.String, List<kotlin.String>>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterSequenceString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, List<kotlin.String>>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren =
            value
                .map { (k, v) ->
                    FfiConverterString.allocationSize(k) +
                        FfiConverterSequenceString.allocationSize(v)
                }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(
        value: Map<kotlin.String, List<kotlin.String>>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceString.write(v, buf)
        }
    }
}

public object FfiConverterMapStringSequenceTypeNode : FfiConverterRustBuffer<Map<kotlin.String, List<Node>>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, List<Node>> {
        val len = buf.getInt()
        return buildMap<kotlin.String, List<Node>>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterSequenceTypeNode.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, List<Node>>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren =
            value
                .map { (k, v) ->
                    FfiConverterString.allocationSize(k) +
                        FfiConverterSequenceTypeNode.allocationSize(v)
                }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(
        value: Map<kotlin.String, List<Node>>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceTypeNode.write(v, buf)
        }
    }
}

/**
 * Asset
 */
fun `assetDefaultRank`(`chain`: kotlin.String): kotlin.Int =
    FfiConverterInt.lift(
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_asset_default_rank(
                FfiConverterString.lower(`chain`),
                _status,
            )
        },
    )

fun `assetWrapper`(`chain`: kotlin.String): AssetWrapper =
    FfiConverterTypeAssetWrapper.lift(
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_asset_wrapper(
                FfiConverterString.lower(`chain`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscDecodeDelegationsReturn`(`result`: kotlin.ByteArray): List<BscDelegation> =
    FfiConverterSequenceTypeBscDelegation.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_decode_delegations_return(
                FfiConverterByteArray.lower(`result`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscDecodeUndelegationsReturn`(`result`: kotlin.ByteArray): List<BscDelegation> =
    FfiConverterSequenceTypeBscDelegation.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_decode_undelegations_return(
                FfiConverterByteArray.lower(`result`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscDecodeValidatorsReturn`(`result`: kotlin.ByteArray): List<BscValidator> =
    FfiConverterSequenceTypeBscValidator.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_decode_validators_return(
                FfiConverterByteArray.lower(`result`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscEncodeClaimCall`(
    `operatorAddress`: kotlin.String,
    `requestNumber`: kotlin.ULong,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_claim_call(
                FfiConverterString.lower(`operatorAddress`),
                FfiConverterULong.lower(`requestNumber`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscEncodeDelegateCall`(
    `operatorAddress`: kotlin.String,
    `delegateVotePower`: kotlin.Boolean,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_delegate_call(
                FfiConverterString.lower(`operatorAddress`),
                FfiConverterBoolean.lower(`delegateVotePower`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscEncodeDelegationsCall`(
    `delegator`: kotlin.String,
    `offset`: kotlin.UShort,
    `limit`: kotlin.UShort,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_delegations_call(
                FfiConverterString.lower(`delegator`),
                FfiConverterUShort.lower(`offset`),
                FfiConverterUShort.lower(`limit`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscEncodeRedelegateCall`(
    `srcValidator`: kotlin.String,
    `dstValidator`: kotlin.String,
    `shares`: kotlin.String,
    `delegateVotePower`: kotlin.Boolean,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_redelegate_call(
                FfiConverterString.lower(`srcValidator`),
                FfiConverterString.lower(`dstValidator`),
                FfiConverterString.lower(`shares`),
                FfiConverterBoolean.lower(`delegateVotePower`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscEncodeUndelegateCall`(
    `operatorAddress`: kotlin.String,
    `shares`: kotlin.String,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_undelegate_call(
                FfiConverterString.lower(`operatorAddress`),
                FfiConverterString.lower(`shares`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `bscEncodeUndelegationsCall`(
    `delegator`: kotlin.String,
    `offset`: kotlin.UShort,
    `limit`: kotlin.UShort,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_undelegations_call(
                FfiConverterString.lower(`delegator`),
                FfiConverterUShort.lower(`offset`),
                FfiConverterUShort.lower(`limit`),
                _status,
            )
        },
    )

/**
 * Bsc
 */
fun `bscEncodeValidatorsCall`(
    `offset`: kotlin.UShort,
    `limit`: kotlin.UShort,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_bsc_encode_validators_call(
                FfiConverterUShort.lower(`offset`),
                FfiConverterUShort.lower(`limit`),
                _status,
            )
        },
    )

/**
 * Cosmos
 */
@Throws(GemstoneException::class)
fun `cosmosConvertHrp`(
    `address`: kotlin.String,
    `hrp`: kotlin.String,
): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_cosmos_convert_hrp(
                FfiConverterString.lower(`address`),
                FfiConverterString.lower(`hrp`),
                _status,
            )
        },
    )

fun `libVersion`(): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lib_version(
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoDecodeGetWithdrawalStatuses`(`result`: kotlin.ByteArray): List<LidoWithdrawalRequest> =
    FfiConverterSequenceTypeLidoWithdrawalRequest.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_decode_get_withdrawal_statuses(
                FfiConverterByteArray.lower(`result`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoDecodeRequestWithdrawalsReturn`(`result`: kotlin.ByteArray): List<kotlin.String> =
    FfiConverterSequenceString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_decode_request_withdrawals_return(
                FfiConverterByteArray.lower(`result`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoDecodeWithdrawalRequestIds`(`result`: kotlin.ByteArray): List<kotlin.String> =
    FfiConverterSequenceString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_decode_withdrawal_request_ids(
                FfiConverterByteArray.lower(`result`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoEncodeClaimWithdrawal`(`requestId`: kotlin.String): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_encode_claim_withdrawal(
                FfiConverterString.lower(`requestId`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoEncodeRequestWithdrawals`(
    `amounts`: List<kotlin.String>,
    `owner`: kotlin.String,
    `permit`: Erc2612Permit,
): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_encode_request_withdrawals(
                FfiConverterSequenceString.lower(`amounts`),
                FfiConverterString.lower(`owner`),
                FfiConverterTypeERC2612Permit.lower(`permit`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoEncodeSubmit`(`referral`: kotlin.String): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_encode_submit(
                FfiConverterString.lower(`referral`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoEncodeWithdrawalRequestIds`(`owner`: kotlin.String): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_encode_withdrawal_request_ids(
                FfiConverterString.lower(`owner`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `lidoEncodeWithdrawalStatuses`(`requestIds`: List<kotlin.String>): kotlin.ByteArray =
    FfiConverterByteArray.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_lido_encode_withdrawal_statuses(
                FfiConverterSequenceString.lower(`requestIds`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `paymentDecodeUrl`(`string`: kotlin.String): PaymentWrapper =
    FfiConverterTypePaymentWrapper.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_payment_decode_url(
                FfiConverterString.lower(`string`),
                _status,
            )
        },
    )

/**
 * Solana
 */
@Throws(GemstoneException::class)
fun `solanaDecodeMetadata`(`base64Str`: kotlin.String): MplMetadata =
    FfiConverterTypeMplMetadata.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_solana_decode_metadata(
                FfiConverterString.lower(`base64Str`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `solanaDeriveMetadataPda`(`mint`: kotlin.String): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_solana_derive_metadata_pda(
                FfiConverterString.lower(`mint`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `suiEncodeSplitStake`(`input`: SuiStakeInput): SuiTxOutput =
    FfiConverterTypeSuiTxOutput.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_sui_encode_split_stake(
                FfiConverterTypeSuiStakeInput.lower(`input`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `suiEncodeTokenTransfer`(`input`: SuiTokenTransferInput): SuiTxOutput =
    FfiConverterTypeSuiTxOutput.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_sui_encode_token_transfer(
                FfiConverterTypeSuiTokenTransferInput.lower(`input`),
                _status,
            )
        },
    )

/**
 * Sui
 */
@Throws(GemstoneException::class)
fun `suiEncodeTransfer`(`input`: SuiTransferInput): SuiTxOutput =
    FfiConverterTypeSuiTxOutput.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_sui_encode_transfer(
                FfiConverterTypeSuiTransferInput.lower(`input`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `suiEncodeUnstake`(`input`: SuiUnstakeInput): SuiTxOutput =
    FfiConverterTypeSuiTxOutput.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_sui_encode_unstake(
                FfiConverterTypeSuiUnstakeInput.lower(`input`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `suiValidateAndHash`(`encoded`: kotlin.String): SuiTxOutput =
    FfiConverterTypeSuiTxOutput.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_sui_validate_and_hash(
                FfiConverterString.lower(`encoded`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `tonBase64ToHexAddress`(`base64Str`: kotlin.String): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_ton_base64_to_hex_address(
                FfiConverterString.lower(`base64Str`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `tonDecodeJettonAddress`(
    `base64Data`: kotlin.String,
    `len`: kotlin.ULong,
): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_ton_decode_jetton_address(
                FfiConverterString.lower(`base64Data`),
                FfiConverterULong.lower(`len`),
                _status,
            )
        },
    )

/**
 * Ton
 */
@Throws(GemstoneException::class)
fun `tonEncodeGetWalletAddress`(`address`: kotlin.String): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_ton_encode_get_wallet_address(
                FfiConverterString.lower(`address`),
                _status,
            )
        },
    )

@Throws(GemstoneException::class)
fun `tonHexToBase64Address`(`hexStr`: kotlin.String): kotlin.String =
    FfiConverterString.lift(
        uniffiRustCallWithError(GemstoneException) { _status ->
            UniffiLib.INSTANCE.uniffi_gemstone_fn_func_ton_hex_to_base64_address(
                FfiConverterString.lower(`hexStr`),
                _status,
            )
        },
    )
